name: Prepare, Build and Push Docker Image

on:
  workflow_call:
    inputs:
      # APPLICATION INFO
      APPLICATION_NAME:
        description: "Web Admin"
        required: true
        type: string
      IMAGE_VERSION:
        description: "1.11.1"
        required: true
        type: string
      PACKAGE_MANAGER:
        default: "npm"
        description: "pnpm"
        required: true
        type: string
      BUILD_COMMAND:
        description: "pnpm build:web-admin"
        required: false
        type: string
      # DOCKER
      REGISTRY:
        description: "skedifycore.azurecr.io"
        required: true
        type: string
      IMAGE_NAME:
        description: "admin-app-builder"
        required: true
        type: string
      DOCKERFILE_LOCATION:
        description: "./apps/web-admin/Dockerfile.production"
        required: true
        type: string
      # SENTRY
      SENTRY_ORG:
        description: "skedify"
        required: false
        type: string
      SENTRY_PROJECT:
        description: "web-admin"
        required: false
        type: string
      SENTRY_SOURCEMAP_LOCATION:
        description: "apps/web-admin/dist/assets"
        required: false
        type: string
      SENTRY_URL_PREFIX:
        description: "~/v2/assets"
        required: false
        type: string
      # SLACK
      ENABLE_SLACK:
        description: "Enable slack notification for this run"
        default: false
        required: false
        type: boolean
      ENABLE_SLACK_RELEASE_NOTES:
        description: "Enable slack message with release information"
        default: false
        required: false
        type: boolean
      SLACK_CHANNEL:
        description: "feature-web"
        required: false
        type: string
    secrets:
      #  DOCKER
      REGISTRY_USERNAME:
        description: "ACR_GITHUB_SERVICE_PRINCIPAL_ID"
        required: true
      REGISTRY_PASSWORD:
        description: "ACR_GITHUB_SERVICE_PRINCIPAL_PASS"
        required: true
      PRIVATE_NPM_TOKEN:
        description: "PRIVATE_NPM_TOKEN"
        required: false
      PUBLIC_NPM_TOKEN:
        description: "PUBLIC_NPM_TOKEN"
        required: false
      #  SENTRY
      SENTRY_AUTH_TOKEN:
        description: "WEB_ADMIN__SENTRY_AUTH_TOKEN"
        required: false
      # SLACK
      SLACK_WEBHOOK:
        description: "SLACK_WEBHOOK"
        required: false
      # Turbo repo integration
      TURBO_TOKEN:
        description: "Turbo token"
        required: false
      TURBO_TEAM:
        description: "Turbo team"
        required: false

jobs:
  deploy-images:
    name: Prepare, Build and Push container
    runs-on: ubuntu-latest
    env:
      IMAGE_FULL_NAME: ${{ inputs.IMAGE_NAME }}:${{ inputs.IMAGE_VERSION }}
      IS_SENTRY_ENABLED: ${{ inputs.SENTRY_PROJECT != null && secrets.SENTRY_AUTH_TOKEN != null && inputs.SENTRY_ORG != null }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Install pnpm
        if: ${{ inputs.PACKAGE_MANAGER == 'pnpm' }}
        uses: pnpm/action-setup@v2.0.1
        with:
          version: 6

      - name: Setup Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: ${{ inputs.PACKAGE_MANAGER }}

      - name: Install dependencies
        run: ${{ inputs.PACKAGE_MANAGER }} install
        env:
          CYPRESS_INSTALL_BINARY: 0
          NPM_CONFIG_USERCONFIG: .npmrc.ci
          PRIVATE_NPM_TOKEN: ${{ secrets.PRIVATE_NPM_TOKEN }}
          PUBLIC_NPM_TOKEN: ${{ secrets.PUBLIC_NPM_TOKEN }}

      - name: Build Package
        if: ${{ inputs.BUILD_COMMAND != null }}
        run: ${{ inputs.BUILD_COMMAND }}
        env:
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
          PRIVATE_NPM_TOKEN: ${{ secrets.PRIVATE_NPM_TOKEN }}
          PUBLIC_NPM_TOKEN: ${{ secrets.PUBLIC_NPM_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=6144

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ inputs.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build the container image and push to registry
        run: |
          docker build -f '${{ inputs.DOCKERFILE_LOCATION }}' --build-arg PRIVATE_NPM_TOKEN="${{ secrets.PRIVATE_NPM_TOKEN }}" -t ${{ inputs.REGISTRY }}/${{ env.IMAGE_FULL_NAME }} .
          docker push ${{ inputs.REGISTRY }}/${{ env.IMAGE_FULL_NAME }}

      - name: Check if sentry sourcemaps are built
        if: ${{ fromJSON(env.IS_SENTRY_ENABLED) && inputs.BUILD_COMMAND == null }}
        run: exit 1

      - name: Create a sentry release
        if: ${{ fromJSON(env.IS_SENTRY_ENABLED) }}
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ inputs.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ inputs.SENTRY_PROJECT }}
        with:
          sourcemaps: ${{ inputs.SENTRY_SOURCEMAP_LOCATION }}
          version: ${{ inputs.IMAGE_VERSION }}
          url_prefix: ${{ inputs.SENTRY_URL_PREFIX }}
          ignore_missing: true
          ignore_empty: true

  send-slack-notifications:
    if: ${{ inputs.ENABLE_SLACK == true }}
    name: Send Slack Notifications
    needs: [deploy-images]
    runs-on: ubuntu-latest
    env:
      IMAGE_FULL_NAME: ${{ inputs.IMAGE_NAME }}:${{ inputs.IMAGE_VERSION }}
      IS_SENTRY_ENABLED: ${{ inputs.SENTRY_PROJECT != null && secrets.SENTRY_AUTH_TOKEN != null && inputs.SENTRY_ORG != null }}
    steps:
      - name: Image Upload Notification
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: GitHub Actions
          SLACK_CHANNEL: ${{ inputs.SLACK_CHANNEL }}
        uses: Ilshidur/action-slack@702accad29cfcfe2ee4ebebb21a3883cc1ac9a39
        with:
          args: "Uploaded image ${{ env.IMAGE_FULL_NAME }} ðŸ›¸."

      - name: Sourcemap Notification
        if: ${{ fromJSON(env.IS_SENTRY_ENABLED) }}
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: GitHub Actions
          SLACK_CHANNEL: ${{ inputs.SLACK_CHANNEL }}
        uses: Ilshidur/action-slack@702accad29cfcfe2ee4ebebb21a3883cc1ac9a39
        with:
          args: "uploaded sentry source maps for ${{ env.IMAGE_FULL_NAME }} ðŸŽ¯."

      - name: Get Release Info
        if: ${{ inputs.ENABLE_SLACK_RELEASE_NOTES == true }}
        uses: actions/github-script@v5
        id: get-release-info
        env:
          VERSION: ${{ inputs.IMAGE_VERSION }}
          APPLICATION: ${{ inputs.APPLICATION_NAME }}
        with:
          script: |
            const tag = context.payload.release.tag_name;

            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag,
            });

            function replaceMarkdown(str) {
              const idx = str.indexOf('###');
              if(idx === -1) return str

              const nextBreak = str.indexOf('\n', idx);
              const replaced = (str.slice(0, nextBreak) + '*' + str.slice(nextBreak)).replace('### ', '*')

              return replaceMarkdown(replaced);
            }

            const { VERSION, APPLICATION } = process.env;

            const releaseBody = release.data.body ? "\n\n" + replaceMarkdown(release.data.body) : "";

            return "*" + APPLICATION + " - Release: " + VERSION + "*" + releaseBody;
          result-encoding: string

      - name: Release Notes Notification
        if: ${{ inputs.ENABLE_SLACK_RELEASE_NOTES == true }}
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: GitHub Actions
          SLACK_CHANNEL: ${{ inputs.SLACK_CHANNEL }}
        uses: Ilshidur/action-slack@702accad29cfcfe2ee4ebebb21a3883cc1ac9a39
        with:
          args: "${{ steps.get-release-info.outputs.result }}"
